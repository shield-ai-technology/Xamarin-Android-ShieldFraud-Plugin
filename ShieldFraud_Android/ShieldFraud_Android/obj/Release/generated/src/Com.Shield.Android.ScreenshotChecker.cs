//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Shield.Android {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.shield.android']/class[@name='ScreenshotChecker']"
	[global::Android.Runtime.Register ("com/shield/android/ScreenshotChecker", DoNotGenerateAcw=true)]
	public partial class ScreenshotChecker : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/shield/android/ScreenshotChecker", typeof (ScreenshotChecker));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ScreenshotChecker (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.shield.android']/class[@name='ScreenshotChecker']/constructor[@name='ScreenshotChecker' and count(parameter)=1 and parameter[1][@type='com.shield.android.ShieldFingerprintUseCase']]"
		[Register (".ctor", "(Lcom/shield/android/ShieldFingerprintUseCase;)V", "")]
		public unsafe ScreenshotChecker (global::Com.Shield.Android.ShieldFingerprintUseCase shieldFingerprintUseCase) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lcom/shield/android/ShieldFingerprintUseCase;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((shieldFingerprintUseCase == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shieldFingerprintUseCase).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (shieldFingerprintUseCase);
			}
		}

		static Delegate cb_start_Landroid_app_Application_;
#pragma warning disable 0169
		static Delegate GetStart_Landroid_app_Application_Handler ()
		{
			if (cb_start_Landroid_app_Application_ == null)
				cb_start_Landroid_app_Application_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Start_Landroid_app_Application_));
			return cb_start_Landroid_app_Application_;
		}

		static void n_Start_Landroid_app_Application_ (IntPtr jnienv, IntPtr native__this, IntPtr native_application)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Shield.Android.ScreenshotChecker> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var application = global::Java.Lang.Object.GetObject<global::Android.App.Application> (native_application, JniHandleOwnership.DoNotTransfer);
			__this.Start (application);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.shield.android']/class[@name='ScreenshotChecker']/method[@name='start' and count(parameter)=1 and parameter[1][@type='android.app.Application']]"
		[Register ("start", "(Landroid/app/Application;)V", "GetStart_Landroid_app_Application_Handler")]
		public virtual unsafe void Start (global::Android.App.Application application)
		{
			const string __id = "start.(Landroid/app/Application;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((application == null) ? IntPtr.Zero : ((global::Java.Lang.Object) application).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (application);
			}
		}

		static Delegate cb_stop_Landroid_app_Application_;
#pragma warning disable 0169
		static Delegate GetStop_Landroid_app_Application_Handler ()
		{
			if (cb_stop_Landroid_app_Application_ == null)
				cb_stop_Landroid_app_Application_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Stop_Landroid_app_Application_));
			return cb_stop_Landroid_app_Application_;
		}

		static void n_Stop_Landroid_app_Application_ (IntPtr jnienv, IntPtr native__this, IntPtr native_application)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Shield.Android.ScreenshotChecker> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
			var application = global::Java.Lang.Object.GetObject<global::Android.App.Application> (native_application, JniHandleOwnership.DoNotTransfer);
			__this.Stop (application);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.shield.android']/class[@name='ScreenshotChecker']/method[@name='stop' and count(parameter)=1 and parameter[1][@type='android.app.Application']]"
		[Register ("stop", "(Landroid/app/Application;)V", "GetStop_Landroid_app_Application_Handler")]
		public virtual unsafe void Stop (global::Android.App.Application application)
		{
			const string __id = "stop.(Landroid/app/Application;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((application == null) ? IntPtr.Zero : ((global::Java.Lang.Object) application).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (application);
			}
		}

	}
}
